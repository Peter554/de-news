---
layout: layout.njk
pagination:
  data: collections.articles
  size: 1
  alias: article
permalink: "articles/{{ article.date | date }}/{{ article.title | slugify }}/"
---

<main>
  <article>
    <header>
      <h1>{{ article.title }}</h1>
      <p><i>{{ article.translated_title }}</i></p>
      <small>
          <p>
              {{ article.date | date }}
          </p>
          <p>
              {% for tag in article.tags %}
                  <a href="/tags/{{ tag.name | slugify }}/">
                      {{ tag.name }} ({{ tag.translated_name }})
                  </a>
                  {% if not loop.last %}
                  ,
                  {% endif %}
              {% endfor %}
          </p>
      </small>
    </header>

    <section>
      <div>
        <button id="toggle-translations">Show Translations</button>
        <button id="read-article">Read Article</button>
        <button id="stop-reading" style="display: none;">Stop Reading</button>
      </div>
      {% for paragraph in article.text %}
        <div>
          <p class="german-text">{{ paragraph.text }}</p>
          <p class="translation" style="display: none;"><i>{{ paragraph.translated_text }}</i></p>
        </div>
      {% endfor %}
    </section>

    <section>
      <h2>Key Vocabulary</h2>
      <dl>
        {% for word in article.key_vocab %}
          <dt>{{ word.term }}</dt>
          <dd>
            <p>{{ word.translated_term }}</p>
            <p><i>{{ word.example_usage }}</i></p>
          </dd>
        {% endfor %}
      </dl>
    </section>

    <section>
        <h2>Sources</h2>
        <ul>
            {% for source in article.sources %}
            <li><a href="{{ source.link_url }}">{{ source.name }}</a></li>
            {% endfor %}
        </ul>
    </section>
  </article>
</main>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const toggleTranslationsButton = document.getElementById('toggle-translations');
    const readButton = document.getElementById('read-article');
    const stopButton = document.getElementById('stop-reading');
    const translations = document.querySelectorAll('.translation');
    const germanTexts = document.querySelectorAll('.german-text');
    let translationsVisible = false;
    let speechSynthesis = window.speechSynthesis;
    let currentUtterance = null;

    // Translation toggle functionality
    toggleTranslationsButton.addEventListener('click', function() {
      translationsVisible = !translationsVisible;

      translations.forEach(function(translation) {
        translation.style.display = translationsVisible ? 'block' : 'none';
      });

      toggleTranslationsButton.textContent = translationsVisible ? 'Hide Translations' : 'Show Translations';
    });

    // Text-to-speech functionality
    readButton.addEventListener('click', function() {
      if ('speechSynthesis' in window) {
        // Stop any current speech
        speechSynthesis.cancel();

        // Collect all German text
        let fullText = '';
        germanTexts.forEach(function(textElement) {
          fullText += textElement.textContent + ' ';
        });

        // Create speech utterance
        currentUtterance = new SpeechSynthesisUtterance(fullText);
        currentUtterance.lang = 'de-DE';
        currentUtterance.rate = 0.8;
        currentUtterance.pitch = 1;

        // Handle speech events
        currentUtterance.onstart = function() {
          readButton.style.display = 'none';
          stopButton.style.display = 'inline-block';
        };

        currentUtterance.onend = function() {
          readButton.style.display = 'inline-block';
          stopButton.style.display = 'none';
        };

        currentUtterance.onerror = function() {
          readButton.style.display = 'inline-block';
          stopButton.style.display = 'none';
        };

        // Start speaking
        speechSynthesis.speak(currentUtterance);
      } else {
        alert('Text-to-speech is not supported in your browser.');
      }
    });

    stopButton.addEventListener('click', function() {
      speechSynthesis.cancel();
      readButton.style.display = 'inline-block';
      stopButton.style.display = 'none';
    });
  });
</script>
